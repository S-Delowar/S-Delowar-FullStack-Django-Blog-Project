name: Deploy Django to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4 

      # Copy docker-compose.yml to EC2
      - name: Debug - List Files
        run: ls -la

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml, nginx.conf"
          target: "/home/ubuntu/"

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to the working directory
            cd /home/ubuntu/

            # Create .env file dynamically with secrets and environment variables
            cat <<EOF > .env
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
            DJANGO_EMAIL_HOST=${{ secrets.DJANGO_EMAIL_HOST }}
            DJANGO_EMAIL_PORT=${{ secrets.DJANGO_EMAIL_PORT }}
            DJANGO_EMAIL_USE_TLS=${{ secrets.DJANGO_EMAIL_USE_TLS }}
            DJANGO_EMAIL_HOST_USER=${{ secrets.DJANGO_EMAIL_HOST_USER }}
            DJANGO_EMAIL_HOST_PASSWORD=${{ secrets.DJANGO_EMAIL_HOST_PASSWORD }}
            DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}

            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            EC2_HOST=${{ secrets.EC2_HOST }}
            EOF

            # Login to aws ecr 
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            # Pull the image from ECR and start the containers
            docker-compose pull

            # Run the container using the latest ECR image
            docker-compose up -d

            # Migrate
            # docker-compose exec -T web python manage.py migrate

            # Collect static files
            docker-compose exec -T web python manage.py collectstatic --noinput


            # Ensure a superuser is created
            docker-compose exec -T web python manage.py shell -c "
            from django.contrib.auth import get_user_model;
            User = get_user_model();
            if not User.objects.filter(username='admin').exists():
                User.objects.create_superuser('admin', 'admin@example.com', '${{ secrets.DJANGO_SUPERUSER_PASSWORD }}');
            "

            # Clean up old Docker images
            docker system prune -af
